<blockquote style="float: left;margin: 0px;">
  <p><%- quote; %></p>
</blockquote>
<style> 
.links line {
  stroke: <%- svg_line_color %>;
  stroke-opacity: <%- svg_line_weight %>;
}
.nodes circle {
  stroke: #fff;
  stroke-width: 0.3px;
}
text {
  font-family: sans-serif;
  stroke: rgb(146, 146, 146);
  stroke-width: 0.2px;
  font-size: <%- svg_text_weight %>;
}
.svgnet{
  width:1000px;
  height:1000px;
  background-color:<%- svg_bgcolor %>;
}
</style>

<script src="https://d3js.org/d3.v4.min.js"></script> 

<div>
<svg class="svgnet" id="svgnet"></svg>  
</div>

<script>
var data = JSON.parse('<%- JSON.stringify(jsons) %>'); //这就是整个代码所可视化的数据
function drawNet(sss){ 
  var svg = d3.select("svg");
  var color = d3.scaleOrdinal(d3.schemeCategory20);
  var w = document.getElementById('svgnet').parentNode.clientWidth-20;
  var h = document.getElementById('svgnet').parentNode.clientHeight;
  <% if (svg_width != "100%"){ %>
      w = <%- svg_width %>;
  <% } if (svg_height != "100%"){ %>
      h = <%- svg_height %>;
  <% } %>
  document.getElementById('svgnet').style.width = w;
  document.getElementById('svgnet').style.height = w + h;
  var simulation = d3.forceSimulation()
  .force('link', d3.forceLink().id(d => d.id).distance(60)) 
      .force("charge", d3.forceManyBody().strength(<%- svg_force %>).distanceMin(50).distanceMax(250).theta(1))
      //.force("charge", d3.forceManyBody().distanceMax(2000))
      .force("center", d3.forceCenter(w / 2 - 10, (w + h) / 2 ));
  var graph = sss;
  var link = svg.append("g")
      .attr("class", "links")
    .selectAll("line")
    .data(graph.links)
    .enter().append("line")
      .attr("stroke-width", function(d) { return Math.sqrt(d.value); });
  var node = svg.append("g")
      .attr("class", "nodes")
    .selectAll("g")
    .data(graph.nodes)
    .enter().append("g")
  var circles = node.append("circle")
      .attr("r", function(d) { 
      if(d.group>=100) return d.group/100*(10.00/48.00)+2; //取整
      else return d.group+2;
    })
      .attr("fill",  function(d) { 
      if(d.group>=100) return '<%- svg_big_color %>';
      else return '<%- svg_small_color %>';
    })
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));
  var lables = node.append("text")
      .html(function(d) {
    if(d.group>=100) {
      var p = d.group/100*(10.00/48.00)+10;
      return "<a style='font-size:"+p+"px;font-weight:600;' href='/categories/"
      +d.id.replace("_","-")+"'>"+d.id+"</a>";
    }else{
      var q = d.group+10;
      return "<a style='font-size:"+q+"px;font-weight:600;' href='/tags/"+d.id+"'>"+d.id+"</a>";
      }
      })
      .attr('x', function(d) { 
      if(d.group>=100) return d.group/100*(10.00/48.00)+5; //取整
      else return d.group+3;
    })
      .attr('y',function(d) { 
      if(d.group>=100) return d.group/100*(3.00/48.00)+5; //取整
      else return 5;
    });
  node.append("title")
      .text(function(d) { return d.id; });
  simulation
      .nodes(graph.nodes)
      .on("tick", ticked);
  simulation.force("link")
      .links(graph.links);
  function ticked() {
    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });
    node
        .attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        })
  }
function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}
function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}
function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}
}
drawNet(data);
</script>


<% if (valineid != "" && valinekey != ""){ %>
	<script type='text/javascript' src='https://cdn.jsdelivr.net/gh/TianZonglin/tuchuang/file/valine.js'></script>
	<script> 
		var GUEST_INFO = ['nick','mail','link'];
		var guest_info = "nick,mail,link".split(',').filter(function(item){
			return GUEST_INFO.indexOf(item) > -1
		});
		var notify = 'true' == true;;
		var verify = 'true' == true;;
		var valine = new Valine();
		valine.init({
			el: '#valine_container',
			notify: notify,
			verify: verify,
			guest_info: guest_info,
			appId: "<%- valineid %>",
			appKey: "<%- valinekey %>",
			placeholder: "如有需要，可在此留言反馈",
			pageSize:'5',
			avatar:'retro',
			lang:'zh-cn',
			visitor: 'true',
			highlight: 'true'
		})
	</script>
<% } %>